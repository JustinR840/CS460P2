Input file: input.ss
   1: (define (function var)
   2:     (cond ((list? ls) "is a list")
   3:     )
   4: )
   5: (define (function var)
   6:     (car ls)
   7: )
   8: (define (function var)
   9:     (cons (car ls) ls)
  10: )
  11: (define (function var)
  12:     (and 1 1)
  13: )
  14: (define (function var)
  15:     (or 1 1)
  16: )
  17: (define (function var)
  18:     (not (= 1 1))
  19: )
  20: (define (function var)
  21:     (number? 1)
  22: )
  23: 
  24: (define (function var)
  25:     (list? ls)
  26: )
  27: (define (function var)
  28:     (zero? 0)
  29: )
  30: (define (function var)
  31:     (null? ls)
  32: )
  33: (define (function var)
  34:     (string? "asf")
  35: )
  36: (define (function var)
  37:     (+ 1 1)
  38: )
  39: (define (function var)
  40:     (- 1 1)
  41: )
  42: (define (function var)
  43:     (/ 4 2)
  44: )
  45: (define (function var)
  46:     (* 2 2)
  47: )
  48: (define (function var)
  49:     (= 1 1)
  50: )
  51: (define (function var)
  52:     (> 2 1)
  53: )
  54: (define (function var)
  55:     (< 1 2)
  56: )
  57: (define (function var)
  58:     (>= 2 2)
  59: )
  60: (define (function var)
  61:     (<= 2 2)
  62: )
  63: (define (functio1 var)
  64:     (* 2 2)
  65: )
  66: 
  67: (define (function2 var)
  68:     (* 1 1)
  69: )
  70: ; Rule 24
  71: (define (rule_24_a) (if (> 3 4) 2 3))
  72: (define (rule_24_b) (if (< 3 4) 'true 'false))
  73: (define (rule_24_c) (if (null? '()) 'is_null 'not_null))
  74: (define (rule_24_d) (if (zero? '3) 'is_zero 'not_zero))
  75: ; Rule 26
  76: (define (rule_26_a) (car '(a)))
  77: (define (rule_26_b) (cdr '(a)))
  78: (define (rule_26_c) (car '((a)b)))
  79: (define (rule_26_d) (cdr '((a)b)))
  80: (define (rule_26_e) (cadr '((a)b)))
  81: (define (rule_26_f) (cddr '((a)b)))
  82: ; Rule 28
  83: (define (rule_28_a) (and))
  84: ; Rule 30
  85: (define (rule_30_a) (not (< 4 3)))
  86: (define (rule_30_b) (not (and (= 3 3) (< 2 3))))
  87: ; Rule 32
  88: (define (rule_32_a) (symbol? 'a))
  89: ; Rule 34
  90: (define (rule_34_a) (zero? 0))
  91: ; Rule 36
  92: (define (rule_36_a) (string? "hello, world"))
  93: ; Rule 38
  94: (define (rule_38_a) (- 4 2))
  95: ; Rule 40
  96: (define (rule_40_a) (* 1 2))
  97: (define (rule_40_b) (*))
  98: ; Rule 42
  99: (define (rule_42_a) (= 2 2))
 100: (define (rule_42_b) (=))
 101: ; Rule 44
 102: (define (rule_44_a) (< 3 4))
 103: (define (rule_44_b) (<))
 104: ; Rule 46
 105: (define (rule_46_a) (<= 3 3))
 106: (define (rule_46_b) (<=))
 107: ; Rule 48
 108: (define (rule_48_a) (display "0118999\n"))
 109: (define (rule_48_b) (display 0118999))
 110: ;; File: S1.ss
 111: ;; Authors: Devin Brown and Ryan Moeller
 112: 
 113: ;; Smallest possible program that compiles
 114: (define (x) x)
 115: ;; File: S25.ss
 116: ;; Authors: Devin Brown and Ryan Moeller
 117: 
 118: ;; Rule 25
 119: (define (x) (cond (x x)))
 120: ;; File: S27.ss
 121: ;; Authors: Devin Brown and Ryan Moeller
 122: 
 123: ;; Rule 27
 124: (define (x) (cons 0 x))
 125: ;; File: S29.ss
 126: ;; Authors: Devin Brown and Ryan Moeller
 127: 
 128: ;; Rule 29
 129: (define (x) (or))
 130: ;; File: S31.ss
 131: ;; Authors: Devin Brown and Ryan Moeller
 132: 
 133: ;; Rule 31
 134: (define (x) (number? x))
 135: ;; File: S33.ss
 136: ;; Authors: Devin Brown and Ryan Moeller
 137: 
 138: ;; Rule 33
 139: (define (x) (list? x))
 140: ;; File: S35.ss
 141: ;; Authors: Devin Brown and Ryan Moeller
 142: 
 143: ;; Rule 35
 144: (define (x) (null? x))
 145: ;; File: S37.ss
 146: ;; Authors: Devin Brown and Ryan Moeller
 147: 
 148: ;; Rule 37
 149: (define (x) (+))
 150: ;; File: S39.ss
 151: ;; Authors: Devin Brown and Ryan Moeller
 152: 
 153: ;; Rule 39
 154: (define (x) (/ x))
 155: ;; File: S41.ss
 156: ;; Authors: Devin Brown and Ryan Moeller
 157: 
 158: ;; Rule 41
 159: (define (x) (modulo x x))
 160: ;; File: S43.ss
 161: ;; Authors: Devin Brown and Ryan Moeller
 162: 
 163: ;; Rule 43
 164: (define (x) (>))
 165: ;; File: S45.ss
 166: ;; Authors: Devin Brown and Ryan Moeller
 167: 
 168: ;; Rule 45
 169: (define (x) (>=))
 170: ;; File: S47.ss
 171: ;; Authors: Devin Brown and Ryan Moeller
 172: 
 173: ;; Rule 47
 174: (define (x) (x))
 175: ;; File: S49.ss
 176: ;; Authors: Devin Brown and Ryan Moeller
 177: 
 178: ;; Rule 49
 179: (define (x) (newline))
 180: (define (isList a) (if (list? a) a 'param_passed_is_not_list)) ;rule 24 ; rule 33(define (carList a) (car a)) ;rule 26(define (PositiveNumber a) (and (number? a) (<= 0 a))) ;rule 28 (define (NotList a) (not (list? a))) ; rule 30;follow actual  structure, all start with define
 181: (define (isSymbol a) (symbol? a)) ; rule 32(define (isZero a) (zero? a)) ;rule 34(define(isString a) (string? a)) ;rule 36(define(Sub a b) (- a b)) ;rule 38(define(Mult a b) (* a b)) ;rule 40(define(EqaulTo a b) (= a b)) ; rule 42(define(LessThan a b) ( < a b));rule 44(define(LessThanEqual a b) ( <= a b )) ;rule 46(define(DisplayZ a) (display a));rule 48;; File: U25.ss
 182: ;; Group U
 183: 
 184: (define (a)
 185:   (cond (a b)
 186:         (else c)
 187:         )
 188:   )
 189: ;; File: U27.ss
 190: ;; Group U
 191: 
 192: (define (a)
 193:   (cons a b)
 194:   )
 195: ;; File: U29.ss
 196: ;; Group U
 197: 
 198: (define (a)
 199:   (or b)
 200:   )
 201: ;; File: U31.ss
 202: ;; Group U
 203: 
 204: (define (a)
 205:   (number? a)
 206:   )
 207: ;; File: U33.ss
 208: ;; Group U
 209: 
 210: (define (a)
 211:   (list? 9)
 212:   )
 213: ;; File U35.ss
 214: ;; Group U
 215: 
 216: (define (a)
 217:   (null? 9)
 218:   )
0 errors found in input file
