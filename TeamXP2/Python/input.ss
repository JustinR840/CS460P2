(define (m) 10)
(define (function var)
    (cond ((list? ls) "is a list")
    )
)
(define (function var)
    (car ls)
)
(define (function var)
    (cons (car ls) ls)
)
(define (function var)
    (AND 1 1)
)
(define (functio1 var)
    (* 2 2)
)

(define (function2 var)
    (* 1 1)
)
(define (abc) 'list?)

(define (a) b)
;;25
(define (a) (cond (ident ident) (else ident )))
;;27
(define (a) (cons '(a) '(b)))
;;29
(define (a) (or))
;;31
(define (a) (numberP ident))
;;33
(define (a) (listP ident))
;;35
(define (a) (nullP ident))
;;37
(define (a) (+))
;;39
(define (a) (/ ident))
;;41
(define (a) (modulo ident ident))
;;43
(define (a) (>))
;;45
(define (a) (>=))
;;47
(define (a) (a))
;;49
(define (a) (newline))
(define (a) '(and)'(zero?)'(else))
(define (last list)
  (cond ((null? (cdr list)) (car list))
	(else (last (cdr list)))
	)
  )
(define (d)
  (- 2))
(define (e)
  (*) )
(define (f)
  (=) )
(define (g)
  (<) )
(define (h)
  (<=))
(define (i)
  (display 'a))
(define (notZero n)
  (not (= n 0))
  )
(define (symbolCheck)
  (symbol? 'a))
(define (function var)
    (cond ((list? ls) "is a list")
    )
)
(define (function var)
    (car ls)
)
(define (function var)
    (cons (car ls) ls)
)
(define (function var)
    (AND 1 1)
)
(define (function var)
    (OR 1 1)
)
(define (function var)
    (NOT (= 1 1))
)
(define (function var)
    (number? 1)
)
(define (function var)
    (symbol? var)
)
(define (function var)
    (list? ls)
)
(define (function var)
    (zero? 0)
)
(define (function var)
    (null? ls)
)
(define (function var)
    (string? "asf")
)
(define (function var)
    (+ 1 1)
)
(define (function var)
    (- 1 1)
)
(define (function var)
    (/ 4 2)
)
(define (function var)
    (* 2 2)
)
(define (function var)
    (modulo 4 2)
)
(define (function var)
    (= 1 1)
)
(define (function var)
    (> 2 1)
)
(define (function var)
    (< 1 2)
)
(define (function var)
    (>= 2 2)
)
(define (function var)
    (<= 2 2)
)
(define (functio1 var)
    (* 2 2)
)

(define (function2 var)
    (* 1 1)
)
(define (function)
    'newline
)
(define (function)
    'string?
)
(define (function)
    ''a
)
; Rule 24
(define (rule_24_a) (if (> 3 4) 2 3))
(define (rule_24_b) (if (< 3 4) 'true 'false))
(define (rule_24_c) (if (null? '()) 'is_null 'not_null))
(define (rule_24_d) (if (zero? '3) 'is_zero 'not_zero))
; Rule 26
(define (rule_26_a) (car '(a)))
(define (rule_26_b) (cdr '(a)))
(define (rule_26_c) (car '((a)b)))
(define (rule_26_d) (cdr '((a)b)))
(define (rule_26_e) (cadr '((a)b)))
(define (rule_26_f) (cddr '((a)b)))
; Rule 28
(define (rule_28_a) (and))
; Rule 30
(define (rule_30_a) (not (< 4 3)))
(define (rule_30_b) (not (and (= 3 3) (< 2 3))))
; Rule 32
(define (rule_32_a) (symbol? 'a))
; Rule 34
(define (rule_34_a) (zero? 0))
; Rule 36
(define (rule_36_a) (string? "hello, world"))
; Rule 38
(define (rule_38_a) (- 4 2))
; Rule 40
(define (rule_40_a) (* 1 2))
(define (rule_40_b) (*))
; Rule 42
(define (rule_42_a) (= 2 2))
(define (rule_42_b) (=))
; Rule 44
(define (rule_44_a) (< 3 4))
(define (rule_44_b) (<))
; Rule 46
(define (rule_46_a) (<= 3 3))
(define (rule_46_b) (<=))
; Rule 48
(define (rule_48_a) (display "0118999\n"))
(define (rule_48_b) (display 0118999))
(define (rules_54_71_76_a arg1 arg2) 
	(if (number? arg1)
		(if (and (> arg1 0) (list? '(< arg1 10)))
			'(cons (/ arg1 2) arg2)
			'()
		)
		"Argument 1 should be a number\n"	
	)
)

;(display (rules_54-71-76_a 4 '(a b c)))